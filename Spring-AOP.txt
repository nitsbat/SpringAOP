SPRING AOP - Aspect object programming

Aspect object programming basically differs from the basic modular programming where we write methods/procedures for implementing things.
This aspect programming is basically used where we are using same methods or objects in multiple classes. i.e logging,transaction,etc.

e.g - suppose we have a method/function which is been used in Class A,class B,Class C. Now what we can do to make the code better is that
	  take out this method in a different class and then make an object of this class and call the method from all these three classes.
	  But now also there is a problem that all the three classes are instantiating the object and calling the function.
	  
	  In AOP, what happens is that we make a aspect of this method, aspect means a new class only but this class will be connected to a configuration
	  in which we will say that if this method is used by all three classes, then these classes will be configured in that aspect configuration.
	  
STEPS IN AOP 
1) Write Aspects i.e classes
2) Configure where the aspects apply.

Now to create an aspect, we have to create a class and then just give an annotation of @Aspect above that class.
in this class we can write the methods which we want to configure to various classes. generally these methods are known
as advices in spring language,
Now for giving that method to run before a particular method or statement in other classes, we use @Before annotation
 and in brackets we can specify that run before that method.
 Also for all this to work properly we have to give the config of aspect-aop in spring.xml, this will tell the spring that
 please search for the aspect in my project and implement it.
Now if we want to run that method for a single or particular class just give the package with class name
in the execution parameter.

Now there are two things
one is like we want to put this method at any point in the code like anywhere,
and the other is this any class can use this method multiple times.

So for first problem we have something called wildcards. wildcards means like suppose we want to use that before method
i.e logging method before any method starting with get so we will give like
@Before("execution(* org.bisht.model.*.get*(..))")


Now to implement multiple methods at the same place we can use pointcut.
this method is known as pointcut.
Refer example in JavaAspect.class

Some more point point cuts examples are
within - you can specify the class in within for which all the methods in this class will execute that method.
args - mainly used when we deals with proxies and all.

*****************************************************************************************
Now suppose the problem is like in LoggingAdvice method we are printing that "Logging advice. calling getMethod"
and we said it should run for all the methods in Circle class. so there is a setter also and it contradicts our method functionality.
So to resolve this we have joinpoints by which we can use the message behavior.

JoinPoint means that it will have the information about the method which is called.
It basically means all the points in your code where the advice method is called. So joinpoint can be more than the method,
it can be configure to run even when a member variable is accessed.
We can include the joinpoints in the argument of our advice method.
Expore the getTarget() method of JoinPoints.

We can also give arguments to the advice method. By that we can control the behavior liek suppose we want to run only
those methods which have the argument of String Datatype.

